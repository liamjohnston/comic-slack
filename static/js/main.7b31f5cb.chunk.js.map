{"version":3,"sources":["img/slack-menu.jpg","img/add-to-slack.jpg","img/comic-slack.png","nonAlphaNumericCharMap.js","components/Use.js","components/Setup.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","nonAlphaNumericCharMap","csMapping","$","re","RegExp","Use","useState","value","setValue","disabled","setDisabled","copied","setCopied","onSubmit","e","preventDefault","htmlFor","className","id","onChange","inputValue","target","toLowerCase","length","rows","type","onClick","cstr","Array","from","forEach","char","test","Object","keys","includes","tempInput","document","createElement","style","body","appendChild","select","execCommand","removeChild","convertAndCopy","role","aria-label","to","href","smooth","duration","zipPath","process","Setup","download","rel","src","imgMenu","alt","imgAddToSlack","App","logo","width","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","getElementById","URL","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.7b31f5cb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/slack-menu.c9ba6021.jpg\";","module.exports = __webpack_public_path__ + \"static/media/add-to-slack.574364be.jpg\";","module.exports = __webpack_public_path__ + \"static/media/comic-slack.ee7b5459.png\";","const nonAlphaNumericCharMap = {\n  ' ': { csMapping: ':cs-s-sp:' },\n  '?': { csMapping: ':cs-s-qm:' },\n  '!': { csMapping: ':cs-s-em:' },\n  '&': { csMapping: ':cs-s-amp:' },\n  '@': { csMapping: ':cs-s-at:' },\n  ',': { csMapping: ':cs-s-com:' },\n  $: { csMapping: ':cs-s-dol:' },\n  '.': { csMapping: ':cs-s-fs:' },\n  '#': { csMapping: ':cs-s-hash:' },\n  '%': { csMapping: ':cs-s-pc:' },\n};\n\nexport default nonAlphaNumericCharMap;\n","import React, { useState, Fragment } from 'react';\nimport { Link } from 'react-scroll';\nimport nonAlphaNumericCharMap from '../nonAlphaNumericCharMap';\n\nconst re = new RegExp('[a-zA-Z0-9]');\n\nconst Use = () => {\n  const [value, setValue] = useState('');\n  const [disabled, setDisabled] = useState(true);\n  const [copied, setCopied] = useState(false);\n\n  const convertAndCopy = () => {\n    let cstr = '';\n\n    //Loop through each character in the textarea value and swap it out with the :cs-* equivalent (where possible)\n    Array.from(value).forEach(char => {\n      // 0-9 and a-z (either case)\n      if (re.test(char)) {\n        cstr += `:cs-${char}:`;\n      } else if (Object.keys(nonAlphaNumericCharMap).includes(char)) {\n        // We also have emojis for some of the more common symbols...\n        cstr += nonAlphaNumericCharMap[char].csMapping;\n      } else {\n        // otherwise just add the character as-is\n        cstr += char;\n      }\n    });\n\n    const tempInput = document.createElement('input');\n    tempInput.style = 'position: absolute; left: -1000px; top: -1000px';\n    tempInput.value = cstr;\n    document.body.appendChild(tempInput);\n    tempInput.select();\n    document.execCommand('copy');\n    document.body.removeChild(tempInput);\n  };\n\n  const handleChange = e => {\n    const inputValue = e.target.value.toLowerCase();\n    setCopied(false);\n    setValue(inputValue);\n\n    if (e.target.value.length === 0) {\n      setDisabled(true);\n    } else {\n      setDisabled(false);\n    }\n  };\n\n  const handleCopy = () => {\n    convertAndCopy();\n    setCopied(true);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n  };\n\n  return (\n    <Fragment>\n      <h2>Use Comic Sans in slack! (sort of)</h2>\n      <form onSubmit={handleSubmit}>\n        <label htmlFor=\"cs-content\" className=\"m_b_sm\">\n          Your message:\n        </label>\n        <textarea\n          id=\"cs-content\"\n          className=\"m_b_md\"\n          onChange={handleChange}\n          rows=\"5\"\n        />\n        <input\n          type=\"submit\"\n          value=\"Copy as Comic Sans\"\n          disabled={disabled}\n          onClick={handleCopy}\n        />\n\n        {copied && (\n          <div className=\"copied-alert\">\n            <span role=\"img\" aria-label=\"yay emoji\">\n              ðŸŽ‰\n            </span>\n            <strong>Copied!</strong> Now paste it into a Slack message\n          </div>\n        )}\n      </form>\n      <p className=\"text-sm\">\n        <strong>Heads up!</strong> Your slack team's account will need to have\n        had the emojis added for this to work. See the{' '}\n        <Link to=\"setup\" href=\"#\" smooth={true} duration={300}>\n          setup\n        </Link>{' '}\n        section.\n      </p>\n    </Fragment>\n  );\n};\n\nexport default Use;\n","import React, { Fragment } from 'react';\nimport { Link } from 'react-scroll';\nimport imgMenu from '../img/slack-menu.jpg';\nimport imgAddToSlack from '../img/add-to-slack.jpg';\n\nconst zipPath = `${process.env.PUBLIC_URL}/files/`;\n\nconst Setup = () => (\n  <Fragment>\n    <section>\n      <header>\n        <h2 className=\"m_t_0\">How it works</h2>\n      </header>\n      <div>\n        <p className=\"m_t_0\">\n          Basically, we'll add a bunch of Comic Sans characters as images to\n          your custom emoji list in Slack. Then you can use the{' '}\n          <Link to=\"compose\" href=\"#\" smooth={true} duration={500}>\n            message composer\n          </Link>{' '}\n          to convert your boring text into glorious Comic Sans.\n        </p>\n        <p>\n          Follow the setup guide below and you'll be impressing your colleagues\n          in no time.\n        </p>\n      </div>\n    </section>\n\n    <section>\n      <header>\n        <h3 className=\"m_t_0 m_b_sm\">Step 1.</h3>\n        <h2 className=\"m_t_0\">Get the 'emojis'</h2>\n      </header>\n      <div>\n        <p className=\"m_t_0\">\n          <a href={`${zipPath}characters.zip`} download>\n            &#11015; Download the images\n          </a>{' '}\n          (zip, 70KB).\n        </p>\n        <p>Unzip it.</p>\n      </div>\n    </section>\n\n    <section>\n      <header>\n        <h3 className=\"m_t_0 m_b_sm\">Step 2.</h3>\n        <h2 className=\"m_t_0\">Enable bulk emoji uploading</h2>\n      </header>\n      <div>\n        <p className=\"m_t_0\">\n          Add the{' '}\n          <a\n            href=\"https://chrome.google.com/webstore/detail/slack-emoji-tools/anchoacphlfbdomdlomnbbfhcmcdmjej\"\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n          >\n            Slack Emoji Tools\n          </a>{' '}\n          Chrome extension.\n        </p>\n        <p>This will make step 3 a breeze.</p>\n      </div>\n    </section>\n\n    <section>\n      <header>\n        <h3 className=\"m_t_0 m_b_sm\">Step 3.</h3>\n        <h2 className=\"m_t_0\">Add the emojis to Slack</h2>\n      </header>\n      <div>\n        <p className=\"m_t_0\">Go to the 'Customize Slack' screen:</p>\n        <img src={imgMenu} alt=\"Menu showing link to Customize Slack\" />\n        <p>\n          The Chrome extension you just added should have enable a bulk upload\n          area on this screen. Simply drag and drop the contents of the\n          'characters' folder.\n        </p>\n        <img src={imgAddToSlack} alt=\"Bulk adding emojis.\" />\n      </div>\n    </section>\n\n    <section>\n      <h2 className=\"m_t_0\">Profit</h2>\n      <div>\n        <p className=\"m_t_0\">\n          You're ready to Slack in style. Head over to the{' '}\n          <Link to=\"compose\" href=\"#\" smooth={true} duration={500}>\n            message composer\n          </Link>{' '}\n          and type your message.\n        </p>\n      </div>\n    </section>\n\n    <section>\n      <header>\n        <h2 className=\"m_t_0\">Known issues</h2>\n      </header>\n      <div>\n        <ul className=\"m_t_0\">\n          <li>\n            Comic Slack uses images, not a font. So you can forget about\n            kerning.\n          </li>\n          <li>\n            I've had to remove transparency from each image so that they are\n            still readable with Slack's dark mode.\n          </li>\n          <li>\n            Comic Slack currently only supports a-z, 0-9 and a small selection\n            of the most common symbols. Any other characters you type will\n            render in whatever garbage font Slack usually uses ;)\n          </li>\n        </ul>\n      </div>\n    </section>\n  </Fragment>\n);\n\nexport default Setup;\n","import React, { Component, Fragment } from 'react';\n//import { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport Use from './components/Use';\nimport Setup from './components/Setup';\n\nimport 'sanitize.css';\nimport './css/styles.scss';\nimport logo from './img/comic-slack.png';\n\nclass App extends Component {\n  render() {\n    return (\n      <Fragment>\n        <header className=\"header\">\n          <img src={logo} alt=\"Comic Slack logo\" width=\"50\" />\n          <div>\n            <h1 className=\"m_t_0 m_b_0\">Comic Slack</h1>\n          </div>\n        </header>\n\n        <main>\n          <div id=\"compose\" className=\"use-wrap wrapper\">\n            <Use />\n          </div>\n          <div id=\"setup\" className=\"setup-wrap wrapper\">\n            <Setup />\n          </div>\n        </main>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}